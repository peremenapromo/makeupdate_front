{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import type { PayloadAction } from \"@reduxjs/toolkit\";\n// import type { RootState } from \"../store\";\n// import { IUser } from \"@/type/type\";\n\n// // Define a type for the slice state\n// interface IUserState {\n//   user: IUser | null;\n//   isAuth: boolean;\n// }\n\n// // Define the initial state using that type\n// const initialState: IUserState = {\n//   user: null,\n//   isAuth: false,\n// };\n\n// export const userSlice = createSlice({\n//   name: \"user\",\n//   // `createSlice` will infer the state type from the `initialState` argument\n//   initialState,\n//   reducers: {\n//     login: (state, action: PayloadAction<IUser>) => {\n//       state.user = action.payload;\n//       state.isAuth = true;\n//     },\n//     logout: (state) => {\n//       state.isAuth = false;\n//       state.user = null;\n//     },\n//   },\n// });\n\n// export const { login, logout } = userSlice.actions;\n\n// // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.user;\n\n// export default userSlice.reducer;\n\nimport { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './user/user.slice';\nexport const store = configureStore({\n  reducer: {\n    user: userReducer\n  }\n});","map":{"version":3,"names":["configureStore","userReducer","store","reducer","user"],"sources":["/home/ovaqvado/work/makeupdate_front/makeupdate/src/store/store.ts"],"sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\n// import type { PayloadAction } from \"@reduxjs/toolkit\";\n// import type { RootState } from \"../store\";\n// import { IUser } from \"@/type/type\";\n\n// // Define a type for the slice state\n// interface IUserState {\n//   user: IUser | null;\n//   isAuth: boolean;\n// }\n\n// // Define the initial state using that type\n// const initialState: IUserState = {\n//   user: null,\n//   isAuth: false,\n// };\n\n// export const userSlice = createSlice({\n//   name: \"user\",\n//   // `createSlice` will infer the state type from the `initialState` argument\n//   initialState,\n//   reducers: {\n//     login: (state, action: PayloadAction<IUser>) => {\n//       state.user = action.payload;\n//       state.isAuth = true;\n//     },\n//     logout: (state) => {\n//       state.isAuth = false;\n//       state.user = null;\n//     },\n//   },\n// });\n\n// export const { login, logout } = userSlice.actions;\n\n// // Other code such as selectors can use the imported `RootState` type\n// export const selectCount = (state: RootState) => state.user;\n\n// export default userSlice.reducer;\n\nimport { configureStore } from '@reduxjs/toolkit'\nimport userReducer from './user/user.slice'\n\nexport const store = configureStore({\n\treducer: {\n\t\tuser: userReducer,\n\t},\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,mBAAmB;AAE3C,OAAO,MAAMC,KAAK,GAAGF,cAAc,CAAC;EACnCG,OAAO,EAAE;IACRC,IAAI,EAAEH;EACP;AACD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}